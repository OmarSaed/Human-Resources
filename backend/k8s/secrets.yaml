# This file contains secret templates. 
# In production, secrets should be created using kubectl or encrypted with tools like Sealed Secrets
# DO NOT commit actual secrets to version control

apiVersion: v1
kind: Secret
metadata:
  name: hrms-secrets
  namespace: hrms
type: Opaque
data:
  # Database secrets (base64 encoded)
  DB_USER: cG9zdGdyZXM=  # postgres
  DB_PASSWORD: Y2hhbmdlLW1lLWluLXByb2R1Y3Rpb24=  # change-me-in-production
  
  # Redis password
  REDIS_PASSWORD: Y2hhbmdlLW1lLWluLXByb2R1Y3Rpb24=  # change-me-in-production
  
  # JWT secrets
  JWT_SECRET: c3VwZXItc2VjcmV0LWp3dC1rZXktY2hhbmdlLWluLXByb2R1Y3Rpb24=  # super-secret-jwt-key-change-in-production
  JWT_REFRESH_SECRET: c3VwZXItc2VjcmV0LXJlZnJlc2gta2V5LWNoYW5nZS1pbi1wcm9kdWN0aW9u  # super-secret-refresh-key-change-in-production
  
  # Encryption keys
  ENCRYPTION_KEY: MzItYnl0ZS1lbmNyeXB0aW9uLWtleS1jaGFuZ2UtaW4tcHJvZA==  # 32-byte-encryption-key-change-in-prod
  
  # Email secrets
  SMTP_USER: bm9yZXBseUBjb21wYW55LmNvbQ==  # noreply@company.com
  SMTP_PASS: ZW1haWwtcGFzc3dvcmQtY2hhbmdlLW1l  # email-password-change-me
  
  # MinIO secrets
  MINIO_ACCESS_KEY: bWluaW9hZG1pbg==  # minioadmin
  MINIO_SECRET_KEY: bWluaW9hZG1pbjEyMw==  # minioadmin123
  
  # Kafka secrets (if SASL is enabled)
  KAFKA_USERNAME: a2Fma2F1c2Vy  # kafkauser
  KAFKA_PASSWORD: a2Fma2FwYXNzd29yZA==  # kafkapassword
  
  # External API keys
  SLACK_WEBHOOK_URL: aHR0cHM6Ly9ob29rcy5zbGFjay5jb20vc2VydmljZXMv...  # Slack webhook URL
  SENDGRID_API_KEY: U0cuLi4=  # SendGrid API key
  
  # Vault token
  VAULT_TOKEN: aHZzLi4u  # hvs...
  
  # AWS S3 Configuration (base64 encoded)
  AWS_S3_BUCKET: aHJtcy1kb2N1bWVudHMtcHJvZA==  # hrms-documents-prod
  AWS_REGION: dXMtZWFzdC0x  # us-east-1
  AWS_ACCESS_KEY_ID: eW91ci1hY2Nlc3Mta2V5  # your-access-key
  AWS_SECRET_ACCESS_KEY: eW91ci1zZWNyZXQta2V5  # your-secret-key
  # AWS_S3_ENDPOINT: # Optional for MinIO
  
  # SSL certificates (if not using cert-manager)
  TLS_CERT: LS0tLS1CRUdJTi...  # TLS certificate
  TLS_KEY: LS0tLS1CRUdJTi...   # TLS private key

---
apiVersion: v1
kind: Secret
metadata:
  name: hrms-secrets-staging
  namespace: hrms-staging
type: Opaque
data:
  # Staging secrets (should be different from production)
  DB_USER: cG9zdGdyZXM=
  DB_PASSWORD: c3RhZ2luZy1kYi1wYXNzd29yZA==
  JWT_SECRET: c3RhZ2luZy1qd3Qtc2VjcmV0LWtleQ==
  JWT_REFRESH_SECRET: c3RhZ2luZy1yZWZyZXNoLXNlY3JldC1rZXk=
  ENCRYPTION_KEY: c3RhZ2luZy1lbmNyeXB0aW9uLWtleQ==
  SMTP_USER: c3RhZ2luZ0Bjb21wYW55LmNvbQ==
  SMTP_PASS: c3RhZ2luZy1lbWFpbC1wYXNzd29yZA==

---
# Image pull secrets for private registries
apiVersion: v1
kind: Secret
metadata:
  name: regcred
  namespace: hrms
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6eyJyZWdpc3RyeS5jb21wYW55LmNvbSI6eyJ1c2VybmFtZSI6InVzZXIiLCJwYXNzd29yZCI6InBhc3MiLCJhdXRoIjoiZFhObGNqcHdZWE56In19fQ==

---
# TLS secret for HTTPS
apiVersion: v1
kind: Secret
metadata:
  name: hrms-tls
  namespace: hrms
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTi...  # Base64 encoded certificate
  tls.key: LS0tLS1CRUdJTi...  # Base64 encoded private key
